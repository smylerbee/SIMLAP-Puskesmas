@page "/forbid"
@using Microsoft.AspNetCore.Identity
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<IdentityUser> _userManager
@inject IHttpContextAccessor accessor

<PageTitle>Forbidden - SIMLAP</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<hr />
<div class="card">
    <div class="card-body">
        <h3 class="card-title">Roles</h3>
        <hr />
        @if (roles.Count() > 0)
        {
            <ul class="list-group">
                @foreach (var role in roles)
                {
                    <li class="list-group-item">
                        <button class="btn btn-outline-danger border-0 me-1" @onclick="() => RemoveRole(role)">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                        @if (IsInRole(role))
                        {
                            <button class="btn btn-danger me-1" @onclick="() => RemMe(role)">Remove me from this role</button>
                        } 
                        else
                        {
                            <button class="btn btn-success me-1" @onclick="() => AddMe(role)">Add me to this role</button>
                        }
                        @*<button class="btn btn-success me-1" @onclick="() => AddMe(role)">Add me to this role</button>*@
                        <span class="text-primary">@role.Name</span>
                    </li>
                }
            </ul>
        } else
        {
            <p class="mb-3"><em>Data belum tersedia</em></p>
        }
        <hr />
        <div class="row">
            <div class="col-md-4">
                <div class="form-floating mb-3">
                    <input id="newRole" @bind="newRole" class="form-control" placeholder="New Role" />
                    <label for="newRole" class="form-label">New Role</label>
                </div>
                <button class="btn btn-success" @onclick="() => SaveRole()">Create New Role</button>
            </div>
        </div>
    </div>
</div>


@code {
    List<IdentityRole> roles = new List<IdentityRole>();
    private IdentityUser currentUser;
    string newRole = string.Empty;
    private List<string> curRoles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await _userManager.GetUserAsync(accessor.HttpContext.User);
        var LcurRoles = await _userManager.GetRolesAsync(currentUser);
        if (LcurRoles != null && LcurRoles.Any())
        {
            curRoles = LcurRoles.ToList();
        }
        var allRole = _roleManager.Roles;
        if (allRole != null && allRole.Any())
        {
            roles = allRole.ToList();
        }
    }

    private async void LoadMyRoles()
    {
        var LcurRoles = await _userManager.GetRolesAsync(currentUser);
        if (LcurRoles != null && LcurRoles.Any())
        {
            curRoles = LcurRoles.ToList();
        }
    }

    private void LoadRoles()
    {
        var allRole = _roleManager.Roles;
        if (allRole != null && allRole.Any())
        {
            roles = allRole.ToList();
        }
    }

    private async void RemoveRole(IdentityRole role)
    {
        await _roleManager.DeleteAsync(role);
        LoadRoles();
    }

    private async void SaveRole()
    {
        await _roleManager.CreateAsync(new IdentityRole(newRole));
        newRole = string.Empty;
        LoadRoles();
    }

    private async void AddMe(IdentityRole role)
    {
        await _userManager.AddToRoleAsync(currentUser, role.Name);
        LoadMyRoles();
    }

    private async void RemMe(IdentityRole role)
    {
        await _userManager.RemoveFromRoleAsync(currentUser, role.Name);
        LoadMyRoles();
    }

    private bool IsInRole(IdentityRole role)
    {
        var result = false;
        foreach (var item in curRoles)
        {
            if (item == role.Name) result = true;
        }
        return result;
    }
}