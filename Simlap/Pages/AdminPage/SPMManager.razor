@page "/manage-spm"
@using Simlap.Data
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider _auth

<PageTitle>Manajemen Data SPM - SIMLAP</PageTitle>

<div class="card">
    <div class="card-body">
        <h4 class="text-muted card-text">Manajemen Data SPM</h4>
        <hr />
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <strong class="text-muted">Tambah Indikator</strong>
                        <hr />
                        <div class="input-group">
                            <input type="text" class="form-control" style="box-shadow: none" placeholder="Nama Indikator" @bind="newHeader" />
                            <button class="input-group-text bg-primary text-light" @onclick="() => SaveHeader()">
                                <span class="oi oi-plus" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <strong class="text-muted">Tambah Jenis Layanan</strong>
                        <hr />
                        <div class="input-group input-group-sm mb-2">
                            <span class="input-group-text w-25">Indikator:</span>
                            <select class="form-control" style="box-shadow: none;" @bind="newSpm.SpmHeaderId">
                                <option selected value="0">== pilih indikator ==</option>
                                @foreach (var item in headers)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div class="input-group input-group-sm mb-2">
                            <span class="input-group-text w-25">Jenis Layanan:</span>
                            <input type="text" class="form-control" style="box-shadow: none;" @bind="newSpm.Indikator" placeholder="jenis layanan" />
                        </div>
                        <div class="input-group input-group-sm mb-2">
                            <span class="input-group-text w-25">Satuan:</span>
                            <select class="form-control" style="box-shadow: none;" @bind="newSpm.Satuan">
                                <option selected value="tidak ada">== pilih satuan ==</option>
                                <option value="ampul">Ampul</option>
                                <option value="buku">Buku</option>
                                <option value="dokumen">Dokumen</option>
                                <option value="formulir">Formulir</option>
                                <option value="media">Media</option>
                                <option value="orang">Orang</option>
                                <option value="paket">Paket</option>
                                <option value="pedoman">Pedoman</option>
                                <option value="tablet">Tablet</option>
                                <option value="unit">Unit</option>
                                <option value="vaksin">Vaksin</option>
                            </select>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" @onclick="() => SaveSpm()">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr class="text-muted" />
        <h4 class="card-subtitle">Indikator</h4>

        @if (headers.Count() > 0)
        {
            <div class="list-group">
                @foreach (var header in headers)
                {
                    <div class="list-group-item">
                        <strong class="text-primary">@header.Name</strong>
                        <p>
                            Jenis Layanan: 
                        </p>
                        <ol>
                            @foreach(var spm in Spms.Where(x => x.SpmHeaderId == header.Id))
                            {
                                <li>
                                    @spm.Indikator
                                    <button class="btn btn-sm btn-outline-danger border-0" @onclick="() => RemoSpm(spm)">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </li>
                            }
                        </ol>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<SpmHeader> headers = new List<SpmHeader>();
    private List<Spm> Spms = new List<Spm>();
    private string newHeader = string.Empty;
    private Spm newSpm = new Spm();
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        username = user.Identity.Name;
        LoadHeaders();
        LoadSpmInfo();
    }

    private void LoadHeaders()
    {
        headers.Clear();
        headers = _context.SpmHeaders.ToList();
    }

    private void LoadSpmInfo()
    {
        Spms.Clear();
        Spms = _context.Spms.ToList();
    }

    private void SaveHeader()
    {
        //if (!string.IsNullOrEmpty(newHeader))
        //{
        var newheader = new SpmHeader { Name = newHeader, Username = username };
        _context.SpmHeaders.Add(newheader);
        _context.SaveChanges();
        newHeader = string.Empty;
        LoadHeaders();
        StateHasChanged();
        //}
    }

    private void SaveSpm()
    {
        newSpm.Username = username;
        _context.Spms.Add(newSpm);
        _context.SaveChanges();
        newSpm = new Spm();
        LoadSpmInfo();
        StateHasChanged();
    }

    private void RemoSpm(Spm spm)
    {
        _context.Entry(spm).State = Microsoft.EntityFrameworkCore.EntityState.Deleted;
        _context.SaveChanges();
        LoadSpmInfo();
        StateHasChanged();
    }
}
